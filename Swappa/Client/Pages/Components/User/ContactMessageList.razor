<div class="table-responsive mt-5">
    @if (IsLoading)
    {
        <div class="text-center align-self-center top-50 m-auto">
            <BlueWallPlaceholder />
        </div>
    }
    else if (!IsLoading && HasError)
    {
        <Alert Color="AlertColor.Danger">
            <h4 class="alert-heading text-center">An error Occurred!</h4>
            <p class="text-center">
                <Icon Name="IconName.Bug"></Icon> Could not load chart. Please contact support if issue persists.
            </p>
        </Alert>
    }
    else
    {
        <Button Color="ButtonColor.Success" Outline="true" Class="mx-1 float-end" Disabled="Selected.IsNullOrEmpty()" @onclick="async () => await MarkSelectedAsRead()">
            <Tooltip Title="Mark the selected message(s) as read" role="button">
                <Icon Name="IconName.EnvelopeCheckFill" /> (@Selected.Count)
            </Tooltip>
        </Button>
        <Button Color="ButtonColor.Danger" Outline="true" Class="mx-1 float-end" Disabled="Selected.IsNullOrEmpty()" @onclick="async () => await ConfirmAndDeleteAll()">
            <Tooltip Title="Delete the selected message(s)" role="button">
                <Icon Name="IconName.Trash" /> (@Selected.Count)
            </Tooltip>
        </Button>
        <table class="table table-striped table-hover table-borderless caption-top">
            <caption class="@GetFontWeight(Selected.IsNullOrEmpty())">
                <p>Selected messages: @Selected.Count</p>
            </caption>
            <thead>
                <tr>
                    <th style="background: #002147; color: white;">
                        <input class="form-check-input" type="checkbox" value="" id="checkAll"
                               checked=@AllChecked()
                               @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }" />
                    </th>
                    <th style="background: #002147; color: white;"></th>
                    <th style="background: #002147; color: white;">Name</th>
                    <th style="background: #002147; color: white;">Email</th>
                    <th style="background: #002147; color: white;">Message</th>
                    <th style="background: #002147; color: white;">Date</th>
                    <th style="background: #002147; color: white;"></th>
                </tr>
            </thead>
            <tbody>
                @if (Data.IsNull() || Data.Data.IsNullOrEmpty())
                {

                    <tr class="box-shadow-inset">
                        <td colspan="11">
                            <Alert Color="AlertColor.Info">
                                <h4 class="alert-heading text-center">No record found!</h4>
                                <p class="text-center">
                                    <Icon Name="IconName.InfoCircle"></Icon>  No vehicle record to display.
                                </p>
                            </Alert>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var data in Data.Data)
                    {
                        <tr class="text-decoration-none @GetFontWeight(data.IsRead)">
                            <td>
                                <input class="form-check-input" type="checkbox" value="" id="@data.Id"
                                       checked=@Selected.Contains(data.Id)
                                       @onchange="eventArgs => { CheckboxClicked(data.Id, eventArgs.Value); }" />
                            </td>
                            <td class="text-center p-0 m-0 @GetReadIndicator(data.IsRead)" style="font-size: 2rem;">&#8226;</td>
                            <td>@data.Name</td>
                            <td>
                                <a style="cursor: pointer;color: royalblue;text-decoration: underline" @onclick="async () => await ShowMessageDetails(data.Id)">@data.Email</a>
                            </td>
                            <td>@GetMessage(data.Message)</td>
                            <td>@data.DateAdded.CommaSeparatedDateTime()</td>
                            <td class="d-flex justify-content-end">
                                <Button Color="ButtonColor.Secondary" Outline="true" Class="mx-1"
                                        @onclick="async () => await ShowMessageDetails(data.Id)">
                                    <Icon Name="IconName.Eye" />
                                </Button>
                                <Button Color="ButtonColor.Success" Outline="true" Class="mx-1"
                                        @onclick="async () => await ConfirmAndDelete(data.Id)">
                                    <Icon Name="IconName.Trash" />
                                </Button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if(Data.IsNotNull() && Data.Data.IsNotNullOrEmpty())
        {
            <Pagination ActivePageNumber="@Data.MetaData.CurrentPage"
                        TotalPages="@Data.MetaData.TotalPages"
                        Alignment="Alignment.Center"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        PageChanged="OnPageChangedAsync"
                        Class="mt-3" />
        }
    }
</div>