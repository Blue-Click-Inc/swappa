@if (_isLoading)
{
    <div class="text-center align-self-center top-50 m-auto">
        <BlueWallPlaceholder />
    </div>
}
else if (!_isLoading && _hasError)
{
    <Alert Color="AlertColor.Danger">
        <h4 class="alert-heading text-center">An error Occurred!</h4>
        <p class="text-center">
            <Icon Name="IconName.Bug"></Icon> Could not load chart. Please contact support if issue persists.
        </p>
    </Alert>
}
else if (pieChart.IsNotNull())
{
    <div class="row d-flex overflow-x-auto justify-content-center m-auto">
        <PieChart @ref="pieChart" Width="500" Class="m-auto" />
        <hr class="mt-3" />
    </div>
}

@code {
    private bool _isLoading = false;
    private bool _hasError = false;
    private PieChart pieChart = new();
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;

    private int datasetsCount = 0;
    private int dataLabelsCount = 0;

    private Random random = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializeDataAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeDataAsync();
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Data Preparation

    private async Task InitializeDataAsync()
    {
        backgroundColors = ColorUtility.CategoricalTwelveColors;
        pieChartOptions = new();
        pieChartOptions.Responsive = true;
        pieChartOptions.Plugins.Title!.Text = $"Users' Feedback - {DateTime.Now.Year}";
        pieChartOptions.Plugins.Title.Display = true;

        _isLoading = true;
        var response = await ChartService.GetFeedbackPiechartData();
        if(response.IsNotNull() && response.IsSuccessful)
        {
            var dataLabels = response.Data.Keys.ToList();
            chartData = new ChartData { Labels = dataLabels, Datasets = GetDefaultDataSets(dataLabels.Count, response.Data.Values.ToList()) };
        }
        else
        {
            chartData = new();
            _hasError = true;
        }

        _isLoading = false;
    }

    private List<IChartDataset> GetDefaultDataSets(int numberOfDataLabels, List<double?> dataSets)
    {
        var datasets = new List<IChartDataset>();
        datasets.Add(GetRandomPieChartDataset(numberOfDataLabels, dataSets));
        return datasets;
    }

    private PieChartDataset GetRandomPieChartDataset(int numberOfDataLabels, List<double?> dataSets)
    {
        datasetsCount += 1;
        var bgColor = SharedService.GetRandomBackgroundColors(numberOfDataLabels, backgroundColors);
        return new() { Label = "", Data = dataSets, BackgroundColor = bgColor };
    }

    private List<string> GetRandomBackgroundColors(int numberOfDataLabels)
    {
        var colors = new List<string>();
        for (var index = 0; index < numberOfDataLabels; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }
    #endregion  Data Preparation
}